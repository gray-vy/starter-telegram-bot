import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, executor



#–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tobacco_list.db')
#–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
cur = conn.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS tobacco_list(
   name_tobacco TEXT,
   quantity INT);
""")
conn.commit()

# –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tobacco_list
cur.execute("SELECT name_tobacco, quantity FROM tobacco_list")

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
results = cur.fetchall()

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–±–∞–∫–∞
tobacco_strings = [f"{row[0]} - {row[1]}" for row in results]

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ join() –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏
tobacco_message = "\n".join(tobacco_strings)


async def send_low_quantity_tobacco(bot: Bot, chat_id: int):
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tobacco_list
    cur.execute("SELECT name_tobacco, quantity FROM tobacco_list")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
    results = cur.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–±–∞–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 2
    tobacco_strings = [f"{row[0]} - {int(row[1])}" for row in results if int(row[1]) < 2]


    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–∞–∫–∏ —Å –Ω–∏–∑–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º
    if tobacco_strings:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ join() –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏
        tobacco_message = "\n".join(tobacco_strings)
        await bot.send_message(chat_id, f"–≠—Ç–æ—Ç —Ç–∞–±–∞–∫ —Å—Ç–æ–∏—Ç –∑–∞–∫–∞–∑–∞—Ç—å ü§î:\n{tobacco_message}")


####

###



    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token="6198709957:AAHZ9mvFccb3LV-E3ZhgDe0MXCnkNQIe2SA")

dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–∞–±–∞–∫–æ–≤üìã")
    keyboard.add(button_1)
    button_2 = types.KeyboardButton(text="–ü–æ–∑–∏—Ü–∏–∏ –∫ –∑–∞—è–≤–∫–µüõí")
    keyboard.add(button_2)
    button_3 = types.KeyboardButton(text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")
    keyboard.add(button_3)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–∞–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '–ò–∑–º–µ–Ω–∏—Ç—å (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)'\nPowered by @grayvord", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Ç–∞–±–∞–∫–æ–≤üìã")
@dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Ç–∞–±–∞–∫–æ–≤üìã")
async def cmd_list(message: types.Message):
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tobacco_list
    cur.execute("SELECT name_tobacco, quantity FROM tobacco_list")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
    results = cur.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–±–∞–∫–∞
    tobacco_strings = [f"{row[0]} - {row[1]}" for row in results]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ join() –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏
    tobacco_message = "\n".join(tobacco_strings)

    await message.reply(tobacco_message)


@dp.message_handler(lambda message: message.text == "–ü–æ–∑–∏—Ü–∏–∏ –∫ –∑–∞—è–≤–∫–µüõí")
async def check_tobacco(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = message.chat.id

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–±–∞–∫–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 2
    await send_low_quantity_tobacco(bot, chat_id)

@dp.message_handler(lambda message: message.text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å"))
async def cmd_change_quantity(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–∞–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    parts = message.text.split()
    name = " ".join(parts[1:-1])
    quantity = int(parts[-1])

    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–∞–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute("UPDATE tobacco_list SET quantity = ? WHERE name_tobacco = ?", (quantity, name))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–∞–∫–∞ \"{name}\" –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {quantity} ‚úÖ")

@dp.message_handler(lambda message: message.text == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã')
async def cmd_raspisanie(message: types.Message):
    await bot.send_photo(chat_id=message.chat.id, photo='https://imgur.com/4FgWfNX')



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)